{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | TuristaMundosMAgicos",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to src folder and run docfx to generate a REAL API Documentation!"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | TuristaMundosMAgicos",
    "keywords": "Add your introductions here!"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | TuristaMundosMAgicos",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | TuristaMundosMAgicos",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | TuristaMundosMAgicos",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "obj/api/Services.DataBaseManager.PlayerManager.html": {
    "href": "obj/api/Services.DataBaseManager.PlayerManager.html",
    "title": "Class PlayerManager | TuristaMundosMAgicos",
    "keywords": "Class PlayerManager Namespace Services.DataBaseManager Assembly Services.dll [ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Reentrant, InstanceContextMode = InstanceContextMode.PerSession)] public class PlayerManager : IPlayer, IGameManager, IGameLogicManager, IPlayAsGuestManager, IFriendList, IFriends Inheritance Object PlayerManager Implements IPlayer IGameManager IGameLogicManager IPlayAsGuestManager IFriendList IFriends Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Fields CurrentGames public static Dictionary<int, Game> CurrentGames Field Value Dictionary<Int32, Game> currentUsers public static Dictionary<int, INotificationsCallBack> currentUsers Field Value Dictionary<Int32, INotificationsCallBack> Methods AcceptFriendRequest(Int32) Acepta una solicitud de amistad y establece una conexión de amistad entre dos jugadores. public int AcceptFriendRequest(int IdRequest) Parameters IdRequest Int32 ID de la solicitud de amistad que se va a aceptar. Returns Int32 Entero que indica el resultado de la operación (0 si hay un error, otro valor si es exitoso). AddGame(Game) Agrega un nuevo juego a la colección de juegos actuales. public void AddGame(Game game) Parameters game Game Objeto idGame que representa el juego a agregar. AddGuestToGame(Int32, Int32) Agrega un jugador invitado a un juego específico. public void AddGuestToGame(int idGame, int idPlayer) Parameters idGame Int32 Identificador del juego al que se agregará el jugador invitado. idPlayer Int32 Identificador del jugador invitado. AddPlayerToGame(Int32, Player) Agrega un jugador a un juego específico en la colección de juegos actuales. public void AddPlayerToGame(int idGame, Player player) Parameters idGame Int32 Identificador del juego al que se agregará el jugador. player Player Objeto Player que representa al jugador a agregar. CheckPreviousFriendRequest(Int32, String) Verifica si existe una solicitud de amistad previa entre dos jugadores. public int CheckPreviousFriendRequest(int Sender, string Reciber) Parameters Sender Int32 Reciber String Returns Int32 Entero que indica el resultado de la verificación (1 si hay una solicitud previa, 0 si no hay). CheckReadyToStartGame(Game) Verifica si todos los jugadores en un juego específico están listos para comenzar el juego. public void CheckReadyToStartGame(Game game) Parameters game Game Objeto Game que representa el juego. CheckTakenPieces(Game, Int32) Verifica las piezas seleccionadas por otros jugadores en el juego y notifica al jugador especificado. public void CheckTakenPieces(Game game, int idPlayer) Parameters game Game Objeto Game que representa el juego actual. idPlayer Int32 Identificador único del jugador a notificar. DeclareLosingPlayer(Player, Int32) Declara a un jugador como perdedor en el juego especificado y realiza acciones asociadas. public void DeclareLosingPlayer(Player loserPlayer, int idGame) Parameters loserPlayer Player Jugador que se declara como perdedor. idGame Int32 Identificador único del juego. ExpelPlayer(Int32, Int32) Expulsa a un jugador del juego si acumula suficientes votos para ser expulsado. public void ExpelPlayer(int idPlayer, int idGame) Parameters idPlayer Int32 Identificador único del jugador. idGame Int32 Identificador único del juego. GetActionCard(Int32, Int32, Wildcard) Realiza la acción asociada a una carta de acción para un jugador en el juego. public void GetActionCard(int idGame, int idPlayer, Wildcard wildcard) Parameters idGame Int32 Identificador único del juego. idPlayer Int32 Identificador único del jugador. wildcard Wildcard Carta de acción a ejecutar. GetFriendRequests(Int32) Obtiene las solicitudes de amistad pendientes para un jugador específico. public List<FriendRequestData> GetFriendRequests(int idPlayer) Parameters idPlayer Int32 ID del jugador para el cual se obtienen las solicitudes de amistad. Returns List<FriendRequestData> Lista de datos de solicitudes de amistad, incluyendo el nombre del remitente y el ID de la solicitud. GetFriends(Int32) Obtiene la lista de amigos para un jugador específico. public List<FriendList> GetFriends(int idPlayer) Parameters idPlayer Int32 ID del jugador para el cual se obtiene la lista de amigos. Returns List<FriendList> Lista de amigos del jugador, incluyendo información como ID y nombre del amigo. GetGame(Int32) Obtiene el objeto idGame asociado al identificador del juego proporcionado. public Game GetGame(int idGame) Parameters idGame Int32 Identificador del juego. Returns Game Devuelve el objeto idGame si se encuentra en la colección de juegos actuales. Si no se encuentra ningún juego con el identificador proporcionado, devuelve null. GetMyPlayersName(Int32, Int32) Obtiene el nombre del jugador asociado al identificador del jugador y al identificador del juego. public string GetMyPlayersName(int idPlayer, int idGame) Parameters idPlayer Int32 Identificador del jugador. idGame Int32 Identificador del juego. Returns String Devuelve el nombre del jugador si se encuentra en la lista de jugadores del juego actual. Si no se encuentra ningún jugador con el identificador proporcionado, devuelve una cadena vacía. GetPlayerData(Int32) Obtiene la información del jugador por su identificador único. public Player GetPlayerData(int idPlayer) Parameters idPlayer Int32 Identificador único del jugador. Returns Player Objeto Player que contiene la información del jugador. GetPlayerName(Int32) Obtiene el nombre del jugador asociado al identificador proporcionado. public string GetPlayerName(int IdPlayer) Parameters IdPlayer Int32 Identificador del jugador. Returns String Devuelve el nombre del jugador si se encuentra en la base de datos. Si no se encuentra ningún jugador, devuelve una cadena vacía. GoToJail(Player, Int32) Envía al jugador a la cárcel en función de su posición actual en el tablero del juego. public void GoToJail(Player player, int idGame) Parameters player Player Jugador que será enviado a la cárcel. idGame Int32 Identificador único del juego. InactivateBeginGameControls(Int32) Desactiva los controles de inicio de juego para todos los jugadores en un juego específico. public void InactivateBeginGameControls(int idGame) Parameters idGame Int32 Identificador del juego al que se aplicará la desactivación. InitializeGame(Game) Inicializa un juego preparando las piezas y cargando la lista de amigos para cada jugador. public void InitializeGame(Game game) Parameters game Game Objeto Game que representa el juego a inicializar. InviteFriendToGame(String, Int32) Invita a un amigo a unirse a un juego enviándole un correo electrónico con un código de verificación. public void InviteFriendToGame(string codeGame, int friendId) Parameters codeGame String Código de verificación del juego. friendId Int32 Identificador único del amigo a invitar. IsGameFull(Int32) Verifica si el juego está completo basándose en el límite máximo de jugadores. public int IsGameFull(int code) Parameters code Int32 Código identificador único del juego. Returns Int32 0 si el juego no está completo, 1 si el juego está completo. IsGameOngoing(Int32) Verifica si el juego está en curso basándose en su estado actual. public int IsGameOngoing(int code) Parameters code Int32 Código identificador único del juego. Returns Int32 0 si el juego está en curso, 1 si el juego no está en curso. JailPlayer(Int32, Int32) Envía al jugador a la cárcel en el juego especificado. public void JailPlayer(int idGame, int idPlayer) Parameters idGame Int32 Identificador único del juego. idPlayer Int32 Identificador único del jugador a enviar a la cárcel. LogOut(Int32) Realiza el proceso de cierre de sesión para un jugador. public int LogOut(int idPlayer) Parameters idPlayer Int32 Identificador único del jugador. Returns Int32 1 si el cierre de sesión fue exitoso, 0 si hubo un error. MakeFriendRequest(Int32, String) Envía una solicitud de amistad desde un jugador remitente a un jugador destinatario. public int MakeFriendRequest(int Sender, string Reciber) Parameters Sender Int32 ID del jugador remitente. Reciber String Nombre del jugador destinatario. Returns Int32 0: La solicitud se envió con éxito. 1: Los jugadores ya son amigos. 2: El jugador destinatario no existe. 3: Ya hay una solicitud de amistad pendiente entre los jugadores. MakeRentalPayment(Int32, Int32, Int64, Int32) Realiza el pago de alquiler entre un inquilino y un propietario de una propiedad en el juego. public int MakeRentalPayment(int idOwnerLand, int idRenter, long amountOfRent, int idGame) Parameters idOwnerLand Int32 Identificador único del propietario de la tierra. idRenter Int32 Identificador único del inquilino. amountOfRent Int64 Cantidad de dinero a pagar como alquiler. idGame Int32 Identificador único del juego. Returns Int32 0 si el pago se realizó con éxito, 1 si el inquilino perdió y 2 si ocurrió una excepción. ModifyPassword(Int32, String, String) public int ModifyPassword(int playerId, string currentPassword, string newPassword) Parameters playerId Int32 currentPassword String newPassword String Returns Int32 ModifyProperty(Property, Int32) Modifica las características de una propiedad en el tablero del juego. public void ModifyProperty(Property property, int idGame) Parameters property Property Propiedad con las nuevas características. idGame Int32 Identificador único del juego. MovePlayer(Int32, Int32, ref Player) Mueve al jugador en el tablero de juego y realiza acciones asociadas al nuevo posicionamiento. public void MovePlayer(int idGame, int playerPosition, ref Player player) Parameters idGame Int32 Identificador único del juego. playerPosition Int32 Posición a la que se moverá el jugador. player Player Jugador que se moverá en el tablero. PayConstruction(Int32, Int64, Int32) Paga los costos de construcción de casas o hoteles para un jugador en el juego. public void PayConstruction(int idPlayer, long constructionCost, int idGame) Parameters idPlayer Int32 Identificador único del jugador. constructionCost Int64 Costo de construcción a pagar por el jugador. idGame Int32 Identificador único del juego. PayPropertyMortgage(Game, Int32, Property) Paga la hipoteca de una propiedad, deshipotecando la propiedad y realizando ajustes financieros al jugador. public void PayPropertyMortgage(Game game, int idPlayer, Property mortgagedProperty) Parameters game Game Objeto Game que representa el juego actual. idPlayer Int32 Identificador único del jugador. mortgagedProperty Property Objeto Property que representa la propiedad hipotecada. PlayerSearch(PlayerSet) Busca un jugador en la base de datos utilizando el nombre de usuario (Nickname) y la contraseña. public int PlayerSearch(PlayerSet player) Parameters player PlayerSet Objeto PlayerSet con el nombre de usuario y la contraseña a buscar. Returns Int32 Devuelve el identificador (Id) del jugador si se encuentra en la base de datos. Si no se encuentra ningún jugador, devuelve 0. PlayTurn(Game) Inicia y ejecuta el turno de juego para un jugador en específico. public void PlayTurn(Game game) Parameters game Game Instancia del juego en curso. PurchaseProperty(Property, Player, Int32) Realiza la compra de una propiedad por parte de un jugador en el juego. public void PurchaseProperty(Property property, Player buyer, int idGame) Parameters property Property Propiedad que se va a comprar. buyer Player Jugador que realiza la compra. idGame Int32 Identificador único del juego. RealizePropertyMortgage(Int32, Property, Int32) Realiza la hipoteca de una propiedad en el juego especificado y proporciona fondos al jugador correspondiente. public void RealizePropertyMortgage(int idGame, Property property, int idPlayer) Parameters idGame Int32 Identificador único del juego. property Property Propiedad que se va a hipotecar. idPlayer Int32 Identificador único del jugador asociado a la propiedad. RegisterPlayer(PlayerSet) public int RegisterPlayer(PlayerSet player) Parameters player PlayerSet Returns Int32 RejectFriendRequest(Int32) Rechaza una solicitud de amistad y la elimina de la base de datos. public int RejectFriendRequest(int IdRequest) Parameters IdRequest Int32 ID de la solicitud de amistad que se va a rechazar. Returns Int32 Entero que indica el resultado de la operación (0 si hay un error, otro valor si es exitoso). SavePlayerSession(Int32) Guarda la sesión de notificaciones de un jugador. public void SavePlayerSession(int idPlayer) Parameters idPlayer Int32 ID del jugador cuya sesión se va a guardar. SearchGameByCode(Int32) Busca un juego en la colección de juegos actual basándose en su código identificador único. public int SearchGameByCode(int code) Parameters code Int32 Código identificador único del juego a buscar. Returns Int32 0 si el juego se encuentra, 1 si el juego no se encuentra. SelectedPiece(Game, String, Int32) Notifica a todos los jugadores en un juego que una pieza específica ha sido seleccionada por un jugador. public void SelectedPiece(Game game, string piece, int idPlayer) Parameters game Game Objeto Game que representa el juego actual. piece String Nombre de la pieza seleccionada. idPlayer Int32 Identificador único del jugador que seleccionó la pieza. SendEmail(String, String) public int SendEmail(string verifyCode, string userEmail) Parameters verifyCode String userEmail String Returns Int32 SendMessage(Int32, String) Envía un mensaje a todos los jugadores de un juego específico. public void SendMessage(int idGame, string message) Parameters idGame Int32 Identificador del juego al que se enviará el mensaje. message String Mensaje a enviar a los jugadores. StartGame(Game) Inicia un juego, actualiza el estado del juego y notifica a todos los jugadores. public void StartGame(Game game) Parameters game Game Objeto Game que representa el juego a iniciar. UnCheckReadyToStartGame(Game) Anula la verificación de si todos los jugadores en un juego específico están listos para comenzar el juego. public void UnCheckReadyToStartGame(Game game) Parameters game Game Objeto Game que representa el juego. UnSelectedPiece(Game, String, Int32) Notifica a todos los jugadores en un juego que una pieza específica ha sido deseleccionada por un jugador. public void UnSelectedPiece(Game game, string piece, int idPlayer) Parameters game Game Objeto Game que representa el juego actual. piece String Nombre de la pieza deseleccionada. idPlayer Int32 Identificador único del jugador que deseleccionó la pieza. UpdatePlayerData(Int32, String) public int UpdatePlayerData(int idPlayer, string Description) Parameters idPlayer Int32 Description String Returns Int32 UpdatePlayerGame(Game, Int32, Piece) Actualiza la información de juego de un jugador, asignando una nueva pieza y número de turno. public int UpdatePlayerGame(Game game, int idPlayer, Piece playersPiece) Parameters game Game Objeto Game que representa el juego actual. idPlayer Int32 Identificador único del jugador a actualizar. playersPiece Piece Objeto Piece que representa la nueva pieza del jugador. Returns Int32 Entero que indica el resultado de la operación (0 si no se actualizó, 1 si se actualizó correctamente). UpdatePlayers(Int32) Actualiza la información de todos los jugadores en un juego específico. public void UpdatePlayers(int idGame) Parameters idGame Int32 Identificador del juego cuyos jugadores se actualizarán. UpdatePlayerService(Int32, Int32) Actualiza el servicio de lógica de juego para un jugador específico en el juego. public void UpdatePlayerService(int idPlayer, int idGame) Parameters idPlayer Int32 Identificador único del jugador. idGame Int32 Identificador único del juego. UpdatePlayerSession(Int32) Actualiza la sesión de notificaciones de un jugador. public void UpdatePlayerSession(int idPlayer) Parameters idPlayer Int32 ID del jugador cuya sesión se actualizará. UpdatePlayersInGame(Int32) Actualiza la información de los jugadores en el juego, cargando la lista de amigos para cada jugador. public void UpdatePlayersInGame(int idGame) Parameters idGame Int32 Identificador único del juego. UpdateQueu(Int32) Actualiza la cola de turnos y notifica a los jugadores no perdedores sobre los turnos actuales. public void UpdateQueu(int idGame) Parameters idGame Int32 Identificador único del juego. VerifyGameCompletion(Int32) Verifica si el juego ha sido completado, determina al ganador y realiza acciones asociadas. public void VerifyGameCompletion(int gameId) Parameters gameId Int32 Identificador único del juego."
  },
  "obj/api/Services.DataBaseManager.html": {
    "href": "obj/api/Services.DataBaseManager.html",
    "title": "Namespace Services.DataBaseManager | TuristaMundosMAgicos",
    "keywords": "Namespace Services.DataBaseManager Classes PlayerManager"
  },
  "obj/api/Services.GameManager.Board.html": {
    "href": "obj/api/Services.GameManager.Board.html",
    "title": "Class Board | TuristaMundosMAgicos",
    "keywords": "Class Board Namespace Services.GameManager Assembly Services.dll public class Board Inheritance Object Board Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Constructors Board() public Board() Fields board public Property[] board Field Value Property[] Methods CreateBoard() Crea y inicializa las propiedades del tablero del juego. public void CreateBoard() GetProperty(Int32) Obtiene la propiedad en una posición específica del tablero. public Property GetProperty(int position) Parameters position Int32 Posición en el tablero para obtener la propiedad. Returns Property Objeto Property que representa la propiedad en la posición especificada. RegisterPropertyMortgage(Property) Registra una hipoteca en una propiedad específica del tablero. public int RegisterPropertyMortgage(Property property) Parameters property Property Propiedad para la cual se registra la hipoteca. Returns Int32 Entero que indica el resultado de la operación: 1 - Operación exitosa (hipoteca registrada). 0 - La propiedad no existe en el tablero (hipoteca no registrada). RegisterPurchaseProperty(Player, Property) Registra la compra de una propiedad por parte de un jugador. public int RegisterPurchaseProperty(Player player, Property property) Parameters player Player Jugador que realiza la compra. property Property Propiedad que se está comprando. Returns Int32 Entero que indica el resultado de la operación: 1 - Operación exitosa (propiedad comprada). 0 - La propiedad ya tiene dueño (no se puede comprar)."
  },
  "obj/api/Services.GameManager.html": {
    "href": "obj/api/Services.GameManager.html",
    "title": "Namespace Services.GameManager | TuristaMundosMAgicos",
    "keywords": "Namespace Services.GameManager Classes Board"
  }
}